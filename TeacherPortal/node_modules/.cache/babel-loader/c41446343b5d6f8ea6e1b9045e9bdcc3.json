{"ast":null,"code":"// export re-usable methods\nimport moment from 'moment';\nimport { authProp, USER } from './types';\n\nclass CommonHelper {\n  constructor() {\n    this.GoogleApiKey = 'AIzaSyD1HLEvbzZQQrcQ-sXPHQjyXuCXNek1vKs';\n\n    this.login = async (history, fakeAuth, data) => {\n      if (fakeAuth) {\n        await localStorage.setItem('loggedInUserData', JSON.stringify(data));\n        fakeAuth.authenticate(() => {\n          history.push('/dashboard');\n        });\n      } else history.push('/login');\n    };\n\n    this.logout = async (history, fakeAuth) => {\n      await localStorage.removeItem('loggedInUserData');\n\n      if (history && fakeAuth) {\n        fakeAuth.signout(() => {\n          history.push('/');\n        });\n      } else {\n        window.location.reload();\n      }\n    };\n\n    this.getLoggedInUserData = () => {\n      const data = localStorage.getItem('loggedInUserData');\n      if (data) return JSON.parse(data);\n      return null;\n    };\n\n    this.getValidExp = experiences => {\n      return experiences.filter(data => data.title && data.joiningDate && data.relievingDate);\n    };\n\n    this.changeDatesFormateDayToYear = data => {\n      const DATA = data;\n      const {\n        dateOfBirth,\n        expiryDate,\n        joiningDate,\n        workExperience\n      } = DATA;\n\n      if (dateOfBirth) {\n        DATA.dateOfBirth = moment(dateOfBirth, 'YYYY-MM-DD').format('DD-MM-YYYY');\n      }\n\n      if (expiryDate) {\n        DATA.expiryDate = moment(expiryDate, 'YYYY-MM-DD').format('DD-MM-YYYY');\n      }\n\n      if (joiningDate) {\n        DATA.joiningDate = moment(joiningDate, 'YYYY-MM-DD').format('DD-MM-YYYY');\n      }\n\n      if (workExperience) {\n        workExperience.map((value, i) => {\n          if (value.joiningDate) {\n            DATA.workExperience[i].joiningDate = moment(value.joiningDate, 'YYYY-MM-DD').format('DD-MM-YYYY');\n          }\n\n          if (value.joiningDate) {\n            DATA.workExperience[i].relievingDate = moment(value.relievingDate, 'YYYY-MM-DD').format('DD-MM-YYYY');\n          }\n\n          return null;\n        });\n      }\n\n      return DATA;\n    };\n\n    this.changeDatesFormateYearToDate = data => {\n      const DATA = data;\n      const {\n        dateOfBirth,\n        expiryDate,\n        joiningDate,\n        workExperience\n      } = DATA;\n\n      if (dateOfBirth) {\n        DATA.dateOfBirth = moment(dateOfBirth, 'DD-MM-YYYY').format('YYYY-MM-DD');\n      }\n\n      if (expiryDate) {\n        DATA.expiryDate = moment(expiryDate, 'DD-MM-YYYY').format('YYYY-MM-DD');\n      }\n\n      if (joiningDate) {\n        DATA.joiningDate = moment(joiningDate, 'DD-MM-YYYY').format('YYYY-MM-DD');\n      }\n\n      if (workExperience) {\n        workExperience.map((value, i) => {\n          if (value.joiningDate) {\n            DATA.workExperience[i].joiningDate = moment(value.joiningDate, 'DD-MM-YYYY').format('YYYY-MM-DD');\n          }\n\n          if (value.joiningDate) {\n            DATA.workExperience[i].relievingDate = moment(value.relievingDate, 'DD-MM-YYYY').format('YYYY-MM-DD');\n          }\n\n          return null;\n        });\n      }\n\n      return DATA;\n    };\n\n    this.checkDataLength = data => {\n      let field = Object.keys(data).map(values => {\n        if (values !== 'error' && values !== 'success' && values !== 'seats' && data[values] && (typeof data[values] === 'string' || typeof data[values] === 'number') && data[values].toString().length > 40) {\n          return values;\n        }\n\n        return null;\n      });\n      field = field.filter(dataValue => dataValue);\n      return field.join();\n    };\n\n    this.validateCharterSearch = data => {\n      if (data && typeof data === 'object') {\n        const {\n          sourceId,\n          saleFor,\n          destinationId,\n          hireType,\n          adults,\n          children,\n          vesselType,\n          date,\n          weight,\n          time\n        } = data;\n\n        if (!sourceId || !date || !time || !vesselType) {\n          return {\n            status: false,\n            error: 'Please fill all required field'\n          };\n        }\n\n        if (!(saleFor === 'destination' && destinationId || saleFor === 'hire' && hireType)) {\n          return {\n            status: false,\n            error: 'Please select either destination or hire type'\n          };\n        }\n\n        if (vesselType === 'LANDING_CRAFT' || vesselType === 'CARGO_BOAT') {\n          if (!this.positiveInteger(weight)) {\n            return {\n              status: false,\n              error: 'Weight should be in positive integer'\n            };\n          }\n        } else if (!(children && Number(children)) && !(adults && Number(adults))) {\n          return {\n            status: false,\n            error: 'At least one of adult or children required'\n          };\n        } else if (!this.positiveInteger(children) && !this.positiveInteger(adults)) {\n          return {\n            status: false,\n            error: 'Adult and children should be in positive integer'\n          };\n        } else if (children.toString().includes('.') || adults.toString().includes('.')) {\n          return {\n            status: false,\n            error: 'Adult and children should be in positive integer'\n          };\n        }\n      }\n\n      return {\n        status: true,\n        error: ''\n      };\n    };\n\n    this.positiveInteger = data => {\n      if (!data || !Number(data) || data.toString().includes('.') || !this.validateInteger(data)) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.validateCharterConfirmation = data => {\n      if (data && typeof data === 'object') {\n        const {\n          phoneNumber,\n          name\n        } = data;\n\n        if (!this.validateInteger(phoneNumber)) {\n          return {\n            status: false,\n            key: 'Phone number is not valid'\n          };\n        }\n\n        if (!this.validateCharacters(name)) {\n          return {\n            status: false,\n            key: 'Name is not valid'\n          };\n        }\n      }\n\n      return {\n        status: true,\n        key: ''\n      };\n    };\n\n    this.validateTicketingData = data => {\n      if (data && typeof data === 'object') {\n        const {\n          children,\n          infants,\n          adults,\n          phoneCode,\n          phoneNumber,\n          name,\n          sourceId,\n          destinationId\n        } = data;\n\n        if (!sourceId || !destinationId || !phoneCode || !phoneNumber || !name) {\n          return {\n            status: false,\n            key: 'Please fill all required field'\n          };\n        }\n\n        if (sourceId === destinationId) {\n          return {\n            status: false,\n            key: \"Source and destination can't be same\"\n          };\n        }\n\n        if (!this.validateInteger(phoneNumber)) {\n          return {\n            status: false,\n            key: 'Phone number is not valid'\n          };\n        }\n\n        if (infants && infants.toString().includes('.') || adults && adults.toString().includes('.') || children && children.toString().includes('.')) {\n          return {\n            status: false,\n            key: 'adult, children, infants can contain only positive number'\n          };\n        }\n\n        if (Number(infants) && !this.validateInteger(infants) || Number(adults) && !this.validateInteger(adults) || Number(children) && !this.validateInteger(children)) {\n          return {\n            status: false,\n            key: 'adult, children, infants can contain only positive number'\n          };\n        }\n\n        if (!(children && Number(children)) && !(adults && Number(adults))) {\n          return {\n            status: false,\n            key: 'At least one of adult or children required'\n          };\n        }\n\n        if (!this.validateCharacters(name)) {\n          return {\n            status: false,\n            key: 'Fullname is not valid'\n          };\n        }\n      }\n\n      return {\n        status: true,\n        key: ''\n      };\n    };\n\n    this.validatedata = data => {\n      if (data && typeof data === 'object') {\n        const {\n          email,\n          phone,\n          pinCode,\n          fullName,\n          name,\n          city,\n          state,\n          topUpCommission,\n          ticketingCommission,\n          cardCommission,\n          goloPayCommission,\n          agentSaleCommission,\n          medicalLeaves,\n          casualLeaves,\n          privilegedLeaves,\n          workExperience,\n          creditLimit,\n          bankTransferNumber,\n          accountNumber,\n          hotelSaleCommission\n        } = data;\n\n        if (bankTransferNumber && (bankTransferNumber.toString().length > 40 || bankTransferNumber.toString().length < 10)) {\n          return {\n            status: false,\n            key: 'Bank transfer number should contain 10 to 40 characters'\n          };\n        }\n\n        if (accountNumber && (!this.validateInteger(accountNumber) || accountNumber.length > 31 || accountNumber.length < 7)) {\n          return {\n            status: false,\n            key: 'Account number, A valid account number should contain 7 to 31 positive numbers'\n          };\n        }\n\n        if (fullName && !this.validateCharacters(fullName)) {\n          return {\n            status: false,\n            key: 'FullName'\n          };\n        }\n\n        if (name && !this.validateCharacters(name)) {\n          return {\n            status: false,\n            key: 'Name'\n          };\n        }\n\n        if (email && !this.validateEmail(email)) {\n          return {\n            status: false,\n            key: 'Email'\n          };\n        }\n\n        if (city && !this.validateCharacters(city)) {\n          return {\n            status: false,\n            key: 'City'\n          };\n        }\n\n        if (state && !this.validateCharacters(state)) {\n          return {\n            status: false,\n            key: 'State'\n          };\n        }\n\n        if (pinCode && (!this.validateOnlyNumber(pinCode) || pinCode.toString().length !== 6)) {\n          return {\n            status: false,\n            key: 'PinCode'\n          };\n        }\n\n        if (creditLimit && (!this.validateInteger(creditLimit) || creditLimit < 0 || creditLimit > 1000000)) {\n          return {\n            status: false,\n            key: 'Credit Limit'\n          };\n        }\n\n        if (phone && !this.validateOnlyNumber(phone) || phone.toString().length > 15) {\n          return {\n            status: false,\n            key: 'Phone'\n          };\n        }\n\n        if (medicalLeaves && (!this.validateOnlyNumber(medicalLeaves) || medicalLeaves > 25)) {\n          return {\n            status: false,\n            key: 'Medical Leaves'\n          };\n        }\n\n        if (casualLeaves && (!this.validateOnlyNumber(casualLeaves) || casualLeaves > 25)) {\n          return {\n            status: false,\n            key: 'Casual Leaves'\n          };\n        }\n\n        if (privilegedLeaves && (!this.validateOnlyNumber(privilegedLeaves) || privilegedLeaves > 25)) {\n          return {\n            status: false,\n            key: 'Privileged Leaves'\n          };\n        }\n\n        if (topUpCommission && (!this.validateDecimal(topUpCommission) || topUpCommission > 99)) {\n          return {\n            status: false,\n            key: 'topup commission'\n          };\n        }\n\n        if (ticketingCommission && (!this.validateDecimal(ticketingCommission) || ticketingCommission > 99)) {\n          return {\n            status: false,\n            key: 'ticketing commission'\n          };\n        }\n\n        if (hotelSaleCommission && (!this.validateDecimal(hotelSaleCommission) || hotelSaleCommission > 99)) {\n          return {\n            status: false,\n            key: 'hotel sale commission'\n          };\n        }\n\n        if (cardCommission && (!this.validateDecimal(cardCommission) || cardCommission > 99)) {\n          return {\n            status: false,\n            key: 'card commission'\n          };\n        }\n\n        if (goloPayCommission && (!this.validateDecimal(goloPayCommission) || goloPayCommission > 99)) {\n          return {\n            status: false,\n            key: 'golo pay commission'\n          };\n        }\n\n        if (agentSaleCommission && (!this.validateDecimal(agentSaleCommission) || agentSaleCommission > 99)) {\n          return {\n            status: false,\n            key: 'agent sale commission'\n          };\n        }\n\n        if (workExperience) {\n          const DATA = this.getValidExp(workExperience);\n          let status = true;\n          DATA.map(value => {\n            if (status && moment(value.joiningDate, 'YYYY-MM-DD').unix() > moment(value.relievingDate, 'YYYY-MM-DD').unix()) {\n              status = false;\n            }\n\n            return null;\n          });\n\n          if (!status) {\n            return {\n              status: false,\n              key: 'Work Experience, Joining date should be lesser then Releaving Date'\n            };\n          }\n        }\n      }\n\n      return {\n        status: true,\n        key: ''\n      };\n    };\n\n    this.validateEmail = email => {\n      // eslint-disable-next-line no-useless-escape\n      const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return re.test(String(email).toLowerCase());\n    };\n\n    this.validateMobile = phone => {\n      const re = /^((\\+\\d{1,3}(-| )?\\(?\\d\\)?(-| )?\\d{1,5})|(\\(?\\d{2,6}\\)?))(-| )?(\\d{3,4})(-| )?(\\d{4})(( x| ext)\\d{1,5}){0,1}$/;\n      return re.test(String(phone).toLowerCase());\n    };\n\n    this.validateCharacters = data => {\n      const letters = /^[a-zA-Z ]+$/;\n\n      if (data.match(letters)) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.validateInteger = data => {\n      // if (Number.isNaN(parseInt(data, 10))) {\n      //   return false;\n      // }\n      // return true;\n      if (Number.isInteger(parseInt(data, 10))) {\n        if (data > 0) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.validateOnlyNumber = data => {\n      const numberRegex = /^[0-9]*$/;\n\n      if (numberRegex.test(data)) {\n        if (data > 0) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.validateDecimal = data => {\n      const pattern = /^\\d+(\\.\\d{1,2})?$/;\n\n      if (pattern.test(data)) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.titleCase = str => {\n      if (str) {\n        str = str.toLowerCase();\n        str = str.charAt(0).toUpperCase() + str.slice(1);\n        return str;\n      }\n\n      return str;\n    };\n\n    this.removeUnderscoreMakeTitleCase = str => {\n      if (str) {\n        str = str.toLowerCase();\n        str = str.split('_');\n\n        for (let i = 0; i < str.length; i++) {\n          str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n        }\n\n        return str.join(' ');\n      }\n\n      return str;\n    };\n\n    this.breakOnCapital = value => value.replace(/([A-Z])/g, ' $1').trim();\n\n    this.keysInObj = obj => Object.keys(obj);\n\n    this.joinArrayValues = dataArray => dataArray.join();\n\n    this.validateAddEditImageSubmit = (data, type) => {\n      const {\n        position,\n        selectedImage,\n        dashboardImageType,\n        description,\n        title\n      } = data;\n\n      if (type === 'add') {\n        if (!position || !selectedImage.length || !dashboardImageType) {\n          return {\n            isError: true,\n            message: \"Image Type, Position of Image and Image is Required.\"\n          };\n        }\n\n        if (title && title.length > 100) {\n          return {\n            isError: true,\n            message: \"Maximum limit of title is 100 character\"\n          };\n        }\n\n        if (description && description.length > 250) {\n          return {\n            isError: true,\n            message: \"Maximum limit of description is 250 character\"\n          };\n        } else {\n          return {\n            isError: false,\n            message: \"\"\n          };\n        }\n      } else {\n        if (!position || !dashboardImageType) {\n          return {\n            isError: true,\n            message: \"Image Type and Position of Image is Required.\"\n          };\n        }\n\n        if (title && title.length > 100) {\n          return {\n            isError: true,\n            message: \"Maximum limit of title is 100 character\"\n          };\n        }\n\n        if (description && description.length > 250) {\n          return {\n            isError: true,\n            message: \"Maximum limit of description is 250 character\"\n          };\n        } else {\n          return {\n            isError: false,\n            message: \"\"\n          };\n        }\n      }\n    };\n\n    this.validateDealForm = (data, type) => {\n      const {\n        selectedImage,\n        description,\n        name,\n        code,\n        dealType,\n        dealValue\n      } = data;\n\n      if (type === 'add') {\n        if (!dealType) {\n          return {\n            isError: true,\n            message: \"Deal Type is required\"\n          };\n        }\n\n        if (!selectedImage.length) {\n          return {\n            isError: true,\n            message: \"Image is required\"\n          };\n        }\n\n        if (!name) {\n          return {\n            isError: true,\n            message: \"Name is required\"\n          };\n        }\n\n        if (name && name.length > 30) {\n          return {\n            isError: true,\n            message: \"Deal name length can not have more than 30 character\"\n          };\n        }\n\n        if (!dealValue) {\n          return {\n            isError: true,\n            message: \"Deal value is required\"\n          };\n        }\n\n        if (!code) {\n          return {\n            isError: true,\n            message: \"Deal code is required\"\n          };\n        }\n\n        if (code && code.length > 10) {\n          return {\n            isError: true,\n            message: \"Deal code length can not have more than 10 character\"\n          };\n        }\n\n        if (!description) {\n          return {\n            isError: true,\n            message: \"Description is required\"\n          };\n        }\n\n        if (description && description.length > 100) {\n          return {\n            isError: true,\n            message: \"Maximum limit of description is 250 character\"\n          };\n        } else {\n          return {\n            isError: false,\n            message: \"\"\n          };\n        }\n      } else {\n        if (!dealType) {\n          return {\n            isError: true,\n            message: \"Deal Type is required\"\n          };\n        }\n\n        if (!name) {\n          return {\n            isError: true,\n            message: \"Name is required\"\n          };\n        }\n\n        if (name && name.length > 30) {\n          return {\n            isError: true,\n            message: \"Deal name length can not have more than 30 character\"\n          };\n        }\n\n        if (!dealValue) {\n          return {\n            isError: true,\n            message: \"Deal value is required\"\n          };\n        }\n\n        if (!code) {\n          return {\n            isError: true,\n            message: \"Deal code is required\"\n          };\n        }\n\n        if (code && code.length > 10) {\n          return {\n            isError: true,\n            message: \"Deal code length can not have more than 10 character\"\n          };\n        }\n\n        if (!description) {\n          return {\n            isError: true,\n            message: \"Description is required\"\n          };\n        }\n\n        if (description && description.length > 100) {\n          return {\n            isError: true,\n            message: \"Maximum limit of description is 100 character\"\n          };\n        } else {\n          return {\n            isError: false,\n            message: \"\"\n          };\n        }\n      }\n    };\n  }\n\n}\n\nexport default CommonHelper;","map":{"version":3,"sources":["/Users/khali/Documents/git/TeacherPortal/src/common/utils.js"],"names":["moment","authProp","USER","CommonHelper","GoogleApiKey","login","history","fakeAuth","data","localStorage","setItem","JSON","stringify","authenticate","push","logout","removeItem","signout","window","location","reload","getLoggedInUserData","getItem","parse","getValidExp","experiences","filter","title","joiningDate","relievingDate","changeDatesFormateDayToYear","DATA","dateOfBirth","expiryDate","workExperience","format","map","value","i","changeDatesFormateYearToDate","checkDataLength","field","Object","keys","values","toString","length","dataValue","join","validateCharterSearch","sourceId","saleFor","destinationId","hireType","adults","children","vesselType","date","weight","time","status","error","positiveInteger","Number","includes","validateInteger","validateCharterConfirmation","phoneNumber","name","key","validateCharacters","validateTicketingData","infants","phoneCode","validatedata","email","phone","pinCode","fullName","city","state","topUpCommission","ticketingCommission","cardCommission","goloPayCommission","agentSaleCommission","medicalLeaves","casualLeaves","privilegedLeaves","creditLimit","bankTransferNumber","accountNumber","hotelSaleCommission","validateEmail","validateOnlyNumber","validateDecimal","unix","re","test","String","toLowerCase","validateMobile","letters","match","isInteger","parseInt","numberRegex","pattern","titleCase","str","charAt","toUpperCase","slice","removeUnderscoreMakeTitleCase","split","breakOnCapital","replace","trim","keysInObj","obj","joinArrayValues","dataArray","validateAddEditImageSubmit","type","position","selectedImage","dashboardImageType","description","isError","message","validateDealForm","code","dealType","dealValue"],"mappings":"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","sourcesContent":["// @flow\r\n// export re-usable methods\r\nimport moment from 'moment';\r\nimport { authProp, USER } from './types';\r\n\r\nclass CommonHelper {\r\n  GoogleApiKey = 'AIzaSyD1HLEvbzZQQrcQ-sXPHQjyXuCXNek1vKs';\r\n\r\n  login = async (history: Object, fakeAuth: authProp, data: USER) => {\r\n    if (fakeAuth) {\r\n      await localStorage.setItem('loggedInUserData', JSON.stringify(data));\r\n      fakeAuth.authenticate(() => {\r\n        history.push('/dashboard');\r\n      });\r\n    } else history.push('/login');\r\n  };\r\n\r\n  logout = async (history: Object, fakeAuth: authProp) => {\r\n    await localStorage.removeItem('loggedInUserData');\r\n    if (history && fakeAuth) {\r\n      fakeAuth.signout(() => {\r\n        history.push('/');\r\n      });\r\n    } else {\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  getLoggedInUserData = () => {\r\n    const data = localStorage.getItem('loggedInUserData');\r\n    if (data) return JSON.parse(data);\r\n    return null;\r\n  };\r\n\r\n  getValidExp = (experiences: any) => {\r\n    return experiences.filter(\r\n      data => data.title && data.joiningDate && data.relievingDate\r\n    );\r\n  };\r\n\r\n  changeDatesFormateDayToYear = (data: Object) => {\r\n    const DATA = data;\r\n    const { dateOfBirth, expiryDate, joiningDate, workExperience } = DATA;\r\n    if (dateOfBirth) {\r\n      DATA.dateOfBirth = moment(dateOfBirth, 'YYYY-MM-DD').format('DD-MM-YYYY');\r\n    }\r\n    if (expiryDate) {\r\n      DATA.expiryDate = moment(expiryDate, 'YYYY-MM-DD').format('DD-MM-YYYY');\r\n    }\r\n    if (joiningDate) {\r\n      DATA.joiningDate = moment(joiningDate, 'YYYY-MM-DD').format('DD-MM-YYYY');\r\n    }\r\n    if (workExperience) {\r\n      workExperience.map((value, i) => {\r\n        if (value.joiningDate) {\r\n          DATA.workExperience[i].joiningDate = moment(\r\n            value.joiningDate,\r\n            'YYYY-MM-DD'\r\n          ).format('DD-MM-YYYY');\r\n        }\r\n        if (value.joiningDate) {\r\n          DATA.workExperience[i].relievingDate = moment(\r\n            value.relievingDate,\r\n            'YYYY-MM-DD'\r\n          ).format('DD-MM-YYYY');\r\n        }\r\n        return null;\r\n      });\r\n    }\r\n    return DATA;\r\n  };\r\n\r\n  changeDatesFormateYearToDate = (data: Object) => {\r\n    const DATA = data;\r\n    const { dateOfBirth, expiryDate, joiningDate, workExperience } = DATA;\r\n    if (dateOfBirth) {\r\n      DATA.dateOfBirth = moment(dateOfBirth, 'DD-MM-YYYY').format('YYYY-MM-DD');\r\n    }\r\n    if (expiryDate) {\r\n      DATA.expiryDate = moment(expiryDate, 'DD-MM-YYYY').format('YYYY-MM-DD');\r\n    }\r\n    if (joiningDate) {\r\n      DATA.joiningDate = moment(joiningDate, 'DD-MM-YYYY').format('YYYY-MM-DD');\r\n    }\r\n    if (workExperience) {\r\n      workExperience.map((value, i) => {\r\n        if (value.joiningDate) {\r\n          DATA.workExperience[i].joiningDate = moment(\r\n            value.joiningDate,\r\n            'DD-MM-YYYY'\r\n          ).format('YYYY-MM-DD');\r\n        }\r\n        if (value.joiningDate) {\r\n          DATA.workExperience[i].relievingDate = moment(\r\n            value.relievingDate,\r\n            'DD-MM-YYYY'\r\n          ).format('YYYY-MM-DD');\r\n        }\r\n        return null;\r\n      });\r\n    }\r\n    return DATA;\r\n  };\r\n\r\n  checkDataLength = (data: Object) => {\r\n    let field = Object.keys(data).map(values => {\r\n      if (\r\n        values !== 'error' &&\r\n        values !== 'success' &&\r\n        values !== 'seats' &&\r\n        data[values] &&\r\n        (typeof data[values] === 'string' ||\r\n          typeof data[values] === 'number') &&\r\n        data[values].toString().length > 40\r\n      ) {\r\n        return values;\r\n      }\r\n      return null;\r\n    });\r\n    field = field.filter(dataValue => dataValue);\r\n    return field.join();\r\n  };\r\n\r\n  validateCharterSearch = (data: Object) => {\r\n    if (data && typeof data === 'object') {\r\n      const {\r\n        sourceId,\r\n        saleFor,\r\n        destinationId,\r\n        hireType,\r\n        adults,\r\n        children,\r\n        vesselType,\r\n        date,\r\n        weight,\r\n        time\r\n      } = data;\r\n      if (!sourceId || !date || !time || !vesselType) {\r\n        return { status: false, error: 'Please fill all required field' };\r\n      }\r\n      if (\r\n        !(\r\n          (saleFor === 'destination' && destinationId) ||\r\n          (saleFor === 'hire' && hireType)\r\n        )\r\n      ) {\r\n        return {\r\n          status: false,\r\n          error: 'Please select either destination or hire type'\r\n        };\r\n      }\r\n      if (vesselType === 'LANDING_CRAFT' || vesselType === 'CARGO_BOAT') {\r\n        if (!this.positiveInteger(weight)) {\r\n          return {\r\n            status: false,\r\n            error: 'Weight should be in positive integer'\r\n          };\r\n        }\r\n      } else if (\r\n        !(children && Number(children)) &&\r\n        !(adults && Number(adults))\r\n      ) {\r\n        return {\r\n          status: false,\r\n          error: 'At least one of adult or children required'\r\n        };\r\n      } else if (\r\n        !this.positiveInteger(children) &&\r\n        !this.positiveInteger(adults)\r\n      ) {\r\n        return {\r\n          status: false,\r\n          error: 'Adult and children should be in positive integer'\r\n        };\r\n      } else if (\r\n        children.toString().includes('.') ||\r\n        adults.toString().includes('.')\r\n      ) {\r\n        return {\r\n          status: false,\r\n          error: 'Adult and children should be in positive integer'\r\n        };\r\n      }\r\n    }\r\n    return { status: true, error: '' };\r\n  };\r\n\r\n  positiveInteger = (data: any) => {\r\n    if (\r\n      !data ||\r\n      !Number(data) ||\r\n      data.toString().includes('.') ||\r\n      !this.validateInteger(data)\r\n    ) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  validateCharterConfirmation = (data: Object) => {\r\n    if (data && typeof data === 'object') {\r\n      const { phoneNumber, name } = data;\r\n      if (!this.validateInteger(phoneNumber)) {\r\n        return { status: false, key: 'Phone number is not valid' };\r\n      }\r\n      if (!this.validateCharacters(name)) {\r\n        return { status: false, key: 'Name is not valid' };\r\n      }\r\n    }\r\n    return { status: true, key: '' };\r\n  };\r\n\r\n  validateTicketingData = (data: Object) => {\r\n    if (data && typeof data === 'object') {\r\n      const {\r\n        children,\r\n        infants,\r\n        adults,\r\n        phoneCode,\r\n        phoneNumber,\r\n        name,\r\n        sourceId,\r\n        destinationId\r\n      } = data;\r\n      if (!sourceId || !destinationId || !phoneCode || !phoneNumber || !name) {\r\n        return { status: false, key: 'Please fill all required field' };\r\n      }\r\n      if (sourceId === destinationId) {\r\n        return { status: false, key: \"Source and destination can't be same\" };\r\n      }\r\n      if (!this.validateInteger(phoneNumber)) {\r\n        return { status: false, key: 'Phone number is not valid' };\r\n      }\r\n      if (\r\n        (infants && infants.toString().includes('.')) ||\r\n        (adults && adults.toString().includes('.')) ||\r\n        (children && children.toString().includes('.'))\r\n      ) {\r\n        return {\r\n          status: false,\r\n          key: 'adult, children, infants can contain only positive number'\r\n        };\r\n      }\r\n      if (\r\n        (Number(infants) && !this.validateInteger(infants)) ||\r\n        (Number(adults) && !this.validateInteger(adults)) ||\r\n        (Number(children) && !this.validateInteger(children))\r\n      ) {\r\n        return {\r\n          status: false,\r\n          key: 'adult, children, infants can contain only positive number'\r\n        };\r\n      }\r\n      if (!(children && Number(children)) && !(adults && Number(adults))) {\r\n        return {\r\n          status: false,\r\n          key: 'At least one of adult or children required'\r\n        };\r\n      }\r\n      if (!this.validateCharacters(name)) {\r\n        return { status: false, key: 'Fullname is not valid' };\r\n      }\r\n    }\r\n    return { status: true, key: '' };\r\n  };\r\n\r\n  validatedata = (data: Object) => {\r\n    if (data && typeof data === 'object') {\r\n      const {\r\n        email,\r\n        phone,\r\n        pinCode,\r\n        fullName,\r\n        name,\r\n        city,\r\n        state,\r\n        topUpCommission,\r\n        ticketingCommission,\r\n        cardCommission,\r\n        goloPayCommission,\r\n        agentSaleCommission,\r\n        medicalLeaves,\r\n        casualLeaves,\r\n        privilegedLeaves,\r\n        workExperience,\r\n        creditLimit,\r\n        bankTransferNumber,\r\n        accountNumber,\r\n        hotelSaleCommission\r\n      } = data;\r\n      if (\r\n        bankTransferNumber &&\r\n        (bankTransferNumber.toString().length > 40 ||\r\n          bankTransferNumber.toString().length < 10)\r\n      ) {\r\n        return {\r\n          status: false,\r\n          key: 'Bank transfer number should contain 10 to 40 characters'\r\n        };\r\n      }\r\n      if (\r\n        accountNumber &&\r\n        (!this.validateInteger(accountNumber) ||\r\n          accountNumber.length > 31 ||\r\n          accountNumber.length < 7)\r\n      ) {\r\n        return {\r\n          status: false,\r\n          key:\r\n            'Account number, A valid account number should contain 7 to 31 positive numbers'\r\n        };\r\n      }\r\n      if (fullName && !this.validateCharacters(fullName)) {\r\n        return { status: false, key: 'FullName' };\r\n      }\r\n      if (name && !this.validateCharacters(name)) {\r\n        return { status: false, key: 'Name' };\r\n      }\r\n      if (email && !this.validateEmail(email)) {\r\n        return { status: false, key: 'Email' };\r\n      }\r\n      if (city && !this.validateCharacters(city)) {\r\n        return { status: false, key: 'City' };\r\n      }\r\n      if (state && !this.validateCharacters(state)) {\r\n        return { status: false, key: 'State' };\r\n      }\r\n      if (\r\n        pinCode &&\r\n        (!this.validateOnlyNumber(pinCode) || pinCode.toString().length !== 6)\r\n      ) {\r\n        return { status: false, key: 'PinCode' };\r\n      }\r\n      if (\r\n        creditLimit &&\r\n        (!this.validateInteger(creditLimit) ||\r\n          creditLimit < 0 ||\r\n          creditLimit > 1000000)\r\n      ) {\r\n        return { status: false, key: 'Credit Limit' };\r\n      }\r\n      if (phone && !this.validateOnlyNumber(phone) || phone.toString().length > 15) {\r\n        return { status: false, key: 'Phone' };\r\n      }\r\n      if (\r\n        medicalLeaves &&\r\n        (!this.validateOnlyNumber(medicalLeaves) || medicalLeaves > 25)\r\n      ) {\r\n        return { status: false, key: 'Medical Leaves' };\r\n      }\r\n      if (\r\n        casualLeaves &&\r\n        (!this.validateOnlyNumber(casualLeaves) || casualLeaves > 25)\r\n      ) {\r\n        return { status: false, key: 'Casual Leaves' };\r\n      }\r\n      if (\r\n        privilegedLeaves &&\r\n        (!this.validateOnlyNumber(privilegedLeaves) || privilegedLeaves > 25)\r\n      ) {\r\n        return { status: false, key: 'Privileged Leaves' };\r\n      }\r\n      if (\r\n        topUpCommission &&\r\n        (!this.validateDecimal(topUpCommission) || topUpCommission > 99)\r\n      ) {\r\n        return { status: false, key: 'topup commission' };\r\n      }\r\n      if (\r\n        ticketingCommission &&\r\n        (!this.validateDecimal(ticketingCommission) || ticketingCommission > 99)\r\n      ) {\r\n        return { status: false, key: 'ticketing commission' };\r\n      }\r\n      if (\r\n        hotelSaleCommission &&\r\n        (!this.validateDecimal(hotelSaleCommission) || hotelSaleCommission > 99)\r\n      ) {\r\n        return { status: false, key: 'hotel sale commission' };\r\n      }\r\n      if (\r\n        cardCommission &&\r\n        (!this.validateDecimal(cardCommission) || cardCommission > 99)\r\n      ) {\r\n        return { status: false, key: 'card commission' };\r\n      }\r\n      if (\r\n        goloPayCommission &&\r\n        (!this.validateDecimal(goloPayCommission) || goloPayCommission > 99)\r\n      ) {\r\n        return { status: false, key: 'golo pay commission' };\r\n      }\r\n      if (\r\n        agentSaleCommission &&\r\n        (!this.validateDecimal(agentSaleCommission) || agentSaleCommission > 99)\r\n      ) {\r\n        return { status: false, key: 'agent sale commission' };\r\n      }\r\n      if (workExperience) {\r\n        const DATA = this.getValidExp(workExperience);\r\n        let status = true;\r\n        DATA.map(value => {\r\n          if (\r\n            status &&\r\n            moment(value.joiningDate, 'YYYY-MM-DD').unix() >\r\n              moment(value.relievingDate, 'YYYY-MM-DD').unix()\r\n          ) {\r\n            status = false;\r\n          }\r\n          return null;\r\n        });\r\n        if (!status) {\r\n          return {\r\n            status: false,\r\n            key:\r\n              'Work Experience, Joining date should be lesser then Releaving Date'\r\n          };\r\n        }\r\n      }\r\n    }\r\n    return { status: true, key: '' };\r\n  };\r\n\r\n  validateEmail = (email: string) => {\r\n    // eslint-disable-next-line no-useless-escape\r\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  validateMobile = (phone: number) => {\r\n    const re = /^((\\+\\d{1,3}(-| )?\\(?\\d\\)?(-| )?\\d{1,5})|(\\(?\\d{2,6}\\)?))(-| )?(\\d{3,4})(-| )?(\\d{4})(( x| ext)\\d{1,5}){0,1}$/;\r\n    return re.test(String(phone).toLowerCase());\r\n  };\r\n\r\n  validateCharacters = (data: string) => {\r\n    const letters = /^[a-zA-Z ]+$/;\r\n    if (data.match(letters)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  validateInteger = (data: number) => {\r\n    // if (Number.isNaN(parseInt(data, 10))) {\r\n    //   return false;\r\n    // }\r\n    // return true;\r\n    if (Number.isInteger(parseInt(data, 10))) {\r\n      if (data > 0) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  validateOnlyNumber = (data: number) => {\r\n    const numberRegex = /^[0-9]*$/;\r\n    if (numberRegex.test(data)) {\r\n      if (data > 0) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  validateDecimal = (data: string) => {\r\n    const pattern = /^\\d+(\\.\\d{1,2})?$/;\r\n    if (pattern.test(data)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  titleCase = str => {\r\n    if (str) {\r\n      str = str.toLowerCase();\r\n      str = str.charAt(0).toUpperCase() + str.slice(1);\r\n      return str;\r\n    }\r\n    return str;\r\n  };\r\n\r\n  removeUnderscoreMakeTitleCase = str => {\r\n    if (str) {\r\n      str = str.toLowerCase();\r\n      str = str.split('_');\r\n      for (let i = 0; i < str.length; i++) {\r\n        str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\r\n      }\r\n      return str.join(' ');\r\n    }\r\n    return str;\r\n  };\r\n\r\n  breakOnCapital = (value: string) => value.replace(/([A-Z])/g, ' $1').trim();\r\n\r\n  keysInObj: Object = (obj: Object) => Object.keys(obj);\r\n\r\n  joinArrayValues = (dataArray: []) => dataArray.join();\r\n\r\n  validateAddEditImageSubmit = (data, type) => {\r\n    const {\r\n      position,\r\n      selectedImage,\r\n      dashboardImageType,\r\n      description,\r\n      title,\r\n    } = data;\r\n    if(type==='add'){\r\n      if(!position || !selectedImage.length || !dashboardImageType){\r\n        return({isError: true, message: \"Image Type, Position of Image and Image is Required.\"})\r\n      }\r\n      if(title && title.length > 100){\r\n        return({isError: true, message: \"Maximum limit of title is 100 character\"})\r\n      }\r\n      if(description && description.length > 250){\r\n        return({isError: true, message: \"Maximum limit of description is 250 character\"})\r\n      }\r\n      else {\r\n        return({isError: false, message: \"\"})\r\n      }\r\n    }\r\n    else {\r\n      if(!position || !dashboardImageType){\r\n        return({isError: true, message: \"Image Type and Position of Image is Required.\"})\r\n      }\r\n      if(title && title.length > 100){\r\n        return({isError: true, message: \"Maximum limit of title is 100 character\"})\r\n      }\r\n      if(description && description.length > 250){\r\n        return({isError: true, message: \"Maximum limit of description is 250 character\"})\r\n      }\r\n      else {\r\n        return({isError: false, message: \"\"})\r\n      }\r\n    }\r\n};\r\n\r\nvalidateDealForm = (data, type) => {\r\n  const {\r\n    selectedImage,\r\n    description,\r\n    name,\r\n    code,\r\n    dealType,\r\n    dealValue,\r\n  } = data;\r\n\r\n  if(type==='add'){\r\n    if(!dealType){\r\n      return({isError: true, message: \"Deal Type is required\"})\r\n    }\r\n    if(!selectedImage.length){\r\n      return({isError: true, message: \"Image is required\"})\r\n    }\r\n    if(!name){\r\n      return({isError: true, message: \"Name is required\"})\r\n    }\r\n    if(name && name.length > 30){\r\n      return({isError: true, message: \"Deal name length can not have more than 30 character\"})\r\n    }\r\n    if(!dealValue){\r\n      return({isError: true, message: \"Deal value is required\"})\r\n    }\r\n    if(!code){\r\n      return({isError: true, message: \"Deal code is required\"})\r\n    }\r\n    if(code && code.length > 10){\r\n      return({isError: true, message: \"Deal code length can not have more than 10 character\"})\r\n    }\r\n    if(!description){\r\n      return({isError: true, message: \"Description is required\"})\r\n    }\r\n    if(description && description.length > 100){\r\n      return({isError: true, message: \"Maximum limit of description is 250 character\"})\r\n    }\r\n    else {\r\n      return({isError: false, message: \"\"})\r\n    }\r\n  }\r\n  else {\r\n    if(!dealType){\r\n      return({isError: true, message: \"Deal Type is required\"})\r\n    }\r\n    if(!name){\r\n      return({isError: true, message: \"Name is required\"})\r\n    }\r\n    if(name && name.length > 30){\r\n      return({isError: true, message: \"Deal name length can not have more than 30 character\"})\r\n    }\r\n    if(!dealValue){\r\n      return({isError: true, message: \"Deal value is required\"})\r\n    }\r\n    if(!code){\r\n      return({isError: true, message: \"Deal code is required\"})\r\n    }\r\n    if(code && code.length > 10){\r\n      return({isError: true, message: \"Deal code length can not have more than 10 character\"})\r\n    }\r\n    if(!description){\r\n      return({isError: true, message: \"Description is required\"})\r\n    }\r\n    if(description && description.length > 100){\r\n      return({isError: true, message: \"Maximum limit of description is 100 character\"})\r\n    }\r\n    else {\r\n      return({isError: false, message: \"\"})\r\n    }\r\n  }\r\n};\r\n}\r\n\r\nexport default CommonHelper;\r\n"]},"metadata":{},"sourceType":"module"}